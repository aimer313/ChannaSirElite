class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n = arr.size();
        unordered_map<int , vector<int>> posMap;
        
        for(int i = 0 ; i<n ; i++) {
            posMap[arr[i]].push_back(i);
        }
        
        unordered_set<int> vis;
        
        queue<int> q;
        q.push(0);
        vis.insert(0);
        int ans = 0;
        while(!q.empty()){
            int size = q.size();
            while(size--) {
                int currPos = q.front();
                q.pop();
                if(currPos == n-1) return ans;
                // for 1 & 2 cond
                //left
                if(currPos-1 >= 0 && vis.find(currPos-1) == vis.end()) {
                    q.push(currPos - 1);
                    vis.insert(currPos - 1);
                }
                //right
                if(currPos+1 < n && vis.find(currPos+1) == vis.end()) {
                    q.push(currPos + 1);
                    vis.insert(currPos + 1);
                }
                //same
                for(int pos : posMap[arr[currPos]]) {
                    if(vis.find(pos) == vis.end()) {
                        q.push(pos);
                        vis.insert(pos);
                    }
                }
                // imp
                posMap.erase(arr[currPos]);
            }
            ans += 1;
        }
        return 0;
    }
};
